AWSTemplateFormatVersion: 2010-09-09
Description: >
    2020 - Udacity Cloud DevOps Engineer Nano Degree - Mislav Dominovic
    Project 2 - Deploy high availability web application

    Services configuration

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  WebServerAMIImageID:
    Description: AMI image ID for web server
    Type: String
    Default: ami-02701bcdc5509e57b
  WebServerInstanceType:
    Description: EC2 Instance type for web werver
    Type: String
    Default: t3.medium
  WebServerVolumeSize:
    Description: Volume size needed for web server
    Type: String
    Default: '10'
  DesiredNumberOfInstances:
    Description: Desired number of web servers
    Type: String
    Default: '4'

Resources:
  UdacityS3ReadOnlyEC2Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
              - "ec2.amazonaws.com"
          Action:
            - "sts:AssumeRole"
      Path: "/"
  ProfileWithRolesForApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: UdacityS3ReadOnlyEC2Role
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web server
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref WebServerAMIImageID
      IamInstanceProfile: !Ref ProfileWithRolesForApp
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref WebServerInstanceType
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: !Ref WebServerVolumeSize
  WebAppServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      DesiredCapacity: !Ref DesiredNumberOfInstances
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
      Tags:
        - Key: Name
          Value: EC2 Instance
          PropagateAtLaunch: true
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LoadBalancerSecGroup
      Tags:
        - Key: Name
          Value: Load Balancer
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP
  AppLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

Outputs:
  WebsiteDNS:
    Description: DNS endpoint of web application
    Value: !Join [ "", [ "http://", !GetAtt WebAppLoadBalancer.DNSName ] ]
    Export:
      Name: !Sub "${EnvironmentName}-WebAppDNS"
